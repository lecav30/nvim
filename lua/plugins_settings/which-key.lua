local wk = require("which-key")

wk.setup({
	win = { border = "single", col = 0.5 },
	preset = "modern",
})

wk.add({
	{
		"<leader><leader>",
		"<CMD>lua require 'telescope'.extensions.find_pickers.find_pickers()<CR>",
		desc = "Find Pickers",
	},
	{ "<leader>b", group = "Buffer" },
	{ "<leader>bl", "<cmd>Telescope buffers<cr>", desc = "List Buffers" },
	-- { "<leader>bw", "<cmd>bdelete<cr>", desc = "Delete Buffer" },
	{
		"<leader>bw",
		function()
			require("mini.bufremove").delete(0, false)
		end,
		desc = "Delete Buffer",
	},
	{ "<leader>bd", "<cmd>Lspsaga show_buf_diagnostics<cr>", desc = "Diagnostics" },
	{ "<leader>c", group = "Code" },
	{ "<leader>ca", "<cmd>Lspsaga code_action<cr>", desc = "Code Action", mode = "n" },
	{ "<leader>cd", "<cmd>Lspsaga show_line_diagnostics<CR>", desc = "Code Diagnostics" },
	{ "<leader>ce", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
	{
		"<leader>cf",
		function()
			require("conform").format({ lsp_fallback = true, async = false, timeout_ms = 500 })
		end,
		desc = "Format Code",
	},
	{ "<leader>d", group = "Debug" },
	{ "<leader>dR", "<cmd>lua require'dap'.run_to_cursor()<cr>", desc = "Run to Cursor" },
	{ "<leader>dE", "<cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')<cr>", desc = "Evaluate Input" },
	{
		"<leader>dC",
		"<cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')<cr>",
		desc = "Conditional Breakpoint",
	},
	{ "<leader>dU", "<cmd>lua require'dapui'.toggle()<cr>", desc = "Toggle UI" },
	{ "<leader>dc", "<cmd>lua require'dap'.continue()<cr>", desc = "Continue" },
	{ "<leader>db", "<cmd>lua require'dapui'.step_back()<cr>", desc = "Step Back" },
	{ "<leader>dd", "<cmd>lua require'dap'.disconnect()<cr>", desc = "Disconnect" },
	{ "<leader>de", "<cmd>lua require'dapui'.eval()<cr>", desc = "Evaluate" },
	{ "<leader>dg", "<cmd>lua require'dap'.session()<cr>", desc = "Get Session" },
	{ "<leader>dh", "<cmd>lua require'dap.ui.widgets'.hover()<cr>", desc = "Hover Variables" },
	{ "<leader>dS", "<cmd>lua require'dap.ui.widgets'.scopes()<cr>", desc = "Scopes" },
	{ "<leader>di", "<cmd>lua require'dap'.step_into()<cr>", desc = "Step Into" },
	{ "<leader>do", "<cmd>lua require'dap'.step_over()<cr>", desc = "Step Over" },
	{ "<leader>dp", "<cmd>lua require'dap'.pause.toggle()<cr>", desc = "Pause" },
	{ "<leader>dq", "<cmd>lua require'dap'.close()<cr>", desc = "Quit" },
	{ "<leader>dr", "<cmd>lua require'dap'.repl.toggle()<cr>", desc = "Toggle Repl" },
	{ "<leader>ds", "<cmd>lua require'dap'.continue()<cr>", desc = "Start" },
	{ "<leader>dt", "<cmd>lua require'dap'.toggle_breakpoint()<cr>", desc = "Toggle Breakpoint" },
	{ "<leader>dx", "<cmd>lua require'dap'.terminate()<cr>", desc = "Terminate" },
	{ "<leader>du", "<cmd>lua require'dap'.step_out()<cr>", desc = "Step Out" },
	{ "<leader>e", group = "Explorer" },
	{ "<leader>ey", "<cmd>Yazi<cr>", desc = "File Explorer" },
	-- { "<leader>ee", "<cmd>Neotree toggle reveal_force_cwd<cr>", desc = "Editor File Explorer" },
	{ "<leader>ee", "<cmd>Neotree float toggle reveal_force_cwd<cr>", desc = "Editor File Explorer Float" },
	{ "<leader>eb", "<cmd>Neotree float toggle buffers<cr>", desc = "Buffers" },
	{ "<leader>es", "<cmd>Neotree float toggle git_status<cr>", desc = "Git Status" },
	{ "<leader>ed", "<cmd>Neotree float toggle document_symbols<cr>", desc = "Document Symbolys" },
	{ "<leader>f", group = "Find" },
	{ "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find File" },
	{ "<leader>fb", "<cmd>Telescope file_browser<cr>", desc = "File Browser" },
	{ "<leader>fg", "<cmd>Telescope live_grep<cr>", desc = "Live grep" },
	{ "<leader>fw", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Current Buffer Fuzzy" },
	{ "<leader>fo", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File" },
	{ "<leader>g", group = "Git & LSP" },
	{ "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Git Branches" },
	{ "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Git Commits" },
	{ "<leader>gs", "<cmd>Telescope git_status<cr>", desc = "Git Status" },
	{ "<leader>gt", "<cmd>Lspsaga peek_type_definition<cr>", desc = "Peek type definition" },
	{ "<leader>gp", "<cmd>Lspsaga peek_definition<cr>", desc = "Peek definition" },
	{ "<leader>gd", "<cmd>Lspsaga goto_definition<cr>", desc = "Go to Definition" },
	-- { "<leader>gD", desc = "Go to Declaration" },
	{ "<leader>gi", "<cmd>Lspsaga incoming_calls<cr>", desc = "Incoming calls" },
	{ "<leader>gf", "<cmd>Lspsaga finder tyd+ref+imp+def<cr>", desc = "Find references" },
	{ "<leader>go", "<cmd>Lspsaga outline<cr>", desc = "Outline" },
	{ "<leader>lg", "<cmd>LazyGit<cr>", desc = "LazyGit" },
	{ "<leader>k", "<cmd>Lspsaga hover_doc<cr>", desc = "Hover Doc" },
	{ "<leader>q", group = "quit" },
	{ "<leader>qs", ":close<CR>", desc = "Close current sliding window" },
	-- { "<leader>qq", ":q!<CR>", desc = "Quit current file" },
	{ "<leader>qq", ":qa!<CR>", desc = "Quit" },
	{ "<leader>rn", "<cmd>Lspsaga rename<cr>", desc = "Rename" },
	{ "<leader>w", group = "Save" },
	{ "<leader>ww", ":w<CR>", desc = "Save file" },
	{ "<leader>wa", ":wa<CR>", desc = "Save all files" },
	{ "<leader>wq", ":wq!<CR>", desc = "Save all files and quit" },
	{ "<leader>v", group = "Vimtex" },
	{ "<leader>vc", "<cmd>VimtexCompile<cr>", desc = "Compile" },
	{ "<leader>vv", "<cmd>VimtexView<cr>", desc = "View" },
	{ "<leader>ve", "<cmd>VimtexErrors<cr>", desc = "Errors" },
	{ "<leader>vs", "<cmd>VimtexStatus<cr>", desc = "Status" },
	{ "<leader>vt", "<cmd>VimtexStop<cr>", desc = "Stop" },
	{ "<leader>z", "<cmd>ZenMode<cr>", desc = "Zen Mode" },
})
